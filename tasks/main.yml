---
- name: Check if OS is supported
  assert:
    msg: msg="Server must be Ubuntu LTS or RedHat/CentOS"
    that: (ansible_distribution == 'Ubuntu'
      and (
        ansible_distribution_version == '14.04'
        or ansible_distribution_version == '16.04'
        or ansible_distribution_version == '18.04'
      ))
      or (ansible_os_family == 'RedHat'
        and (
      ansible_distribution_major_version == '6'
      or ansible_distribution_major_version == '7'
      ))

- name: Include variables for OS system
  include_vars: "vars/{{ ansible_os_family }}.yml"

- name: Run {{ letsencrypt_webserver }}.yml playbook
  include: "{{ letsencrypt_webserver }}.yml"

- name: Create the acme-challenge dir
  file:
    path: "{{ letsencrypt_webroot }}/.well-known/acme-challenge"
    state: directory
  notify: "restart {{ letsencrypt_webserver }}"

- name: Be able to ping the challenge dir
  lineinfile:
    dest: "{{ letsencrypt_webroot }}/.well-known/acme-challenge/ping"
    state: present
    line: pong
    create: yes

- block:
  - name: Install Certbot PPA on U18
    apt_repository:
      repo: ppa:certbot/certbot
      state: present
  - name: Install LetsEncrypt on U18
    apt:
      name: letsencrypt
      state: present
      update_cache: true
  - name: Create symlink to old certbot path for AAW's benefit
    file:
      state: link
      src: /usr/bin/certbot
      dest: /usr/local/bin/certbot-auto
  when: ansible_distribution == 'Ubuntu'
    and ansible_distribution_version == '18.04'

- name: Check if certbot-auto exists
  stat: path=/usr/local/bin/certbot-auto
  register: certbot_auto_file

- name: Download certbot-auto if it doesn't exist
  get_url:
    url: https://raw.githubusercontent.com/certbot/certbot/master/certbot-auto
    # checksum="sha256:0103972f4d42704ff70ac855b502718fadf161925eaa7da16455fa55737c8887"
    dest: /usr/local/bin/certbot-auto
    mode: 0755
  notify: "restart {{ letsencrypt_webserver }}"
  when: not certbot_auto_file.stat.exists

- name: Automatically update certbot-auto once a month with cron on older Ubuntu
  cron:
    name: "Update certbot-auto once a month"
    minute: "0"
    hour: "0"
    day: "1"
    # The sed commands after the certbot script keep this job quiet when there is no upgrade and there are no errors.
    job: >
      /usr/local/bin/certbot-auto --version 2>&1 | /bin/sed -r 's/^certbot ([0-9]+)(\.[0-9]+)+$//' |/bin/sed '/^\s*$/d'
  tags:
    - letsencrypt_cron
  when: ansible_distribution == 'Ubuntu'
    and ansible_distribution_major_version |int < 18

- name: Create a destination for dhparams
  file:
    path: "/usr/local/ssl/private"
    state: directory
    mode: 0700

- name: Create dhparams.pem (can take several minutes)
  shell: umask 077 && openssl dhparam -out /usr/local/ssl/private/dhparams.pem 2048
  args:
    creates: /usr/local/ssl/private/dhparams.pem

- name: Stat the default site SSL cert
  shell: "test -e /etc/letsencrypt/live/{{ default_site_fqdn }}"
  register: default_cert_result
  changed_when: "default_cert_result.rc != 0"
  ignore_errors: true

- name: Create a cert for the default site (can take some time)
  shell: >
    /usr/local/bin/certbot-auto
     --non-interactive
     --agree-tos
     --email {{ default_mail_recipient }}
     certonly
     --webroot
     --webroot-path {{ letsencrypt_webroot }}
     --domains $(hostname -f)
  register: certbot_result
  when: default_cert_result is defined
    and default_cert_result.rc is defined
    and default_cert_result.rc != 0

- name: Re-stat default site SSL cert
  shell: "test -e /etc/letsencrypt/live/{{ default_site_fqdn }}"
  register: default_cert_retest
  ignore_errors: true
  changed_when: default_cert_retest.rc != default_cert_result.rc

- name: Run {{ letsencrypt_webserver }}_default_ssl.yml playbook
  include: "{{ letsencrypt_webserver }}_default_ssl.yml"
